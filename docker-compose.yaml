services:
  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/src:ro
      - ./frontend-build:/app/dist
    command: >
      sh -c "
        cp -r /src/* . &&
        npm ci &&
        npm run build
      "
    restart: "no"
  bot:
    restart: always
    build:
      context: chatbot/
      dockerfile: Dockerfile
    image: tpu-practice-searcher-bot:latest
    container_name: tpu-practice-searcher-bot-container
    networks:
      - prod_net
    environment:
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: "db"
      DB_USER: "notdefaultuser"
      DB_PASSWORD: "notdefaultuserpassword"
      TELEGRAM_BOT_TOKEN: "7650435197:AAFWerS9j6ikk2MFlQ6raTgRFin2BL3FbQ0"
    depends_on:
      - db

  backend:
    restart: always
    build:
      context: backend/
      dockerfile: Dockerfile
    image: tpu-practice-searcher:latest
    container_name: tpu-practice-searcher-container
    networks:
      - prod_net
    environment:
      DB_HOST: "db"
      DB_PORT: "5432"
      DB_NAME: "db"
      DB_USER: "notdefaultuser"
      DB_PASSWORD: "notdefaultuserpassword"
      TELEGRAM_BOT_TOKEN: "7650435197:AAFWerS9j6ikk2MFlQ6raTgRFin2BL3FbQ0"
      JWT_SECRET_TOKEN: "JWT_SECRET_TOKEN"
    ports:
      - "8000:8000"
    depends_on:
      - db
    command: "./tpu-practice-searcher"

  db:
    image: postgres:16.0
    container_name: postgres-container
    networks:
      - prod_net
    environment:
      POSTGRES_USER: "notdefaultuser"
      POSTGRES_PASSWORD: "notdefaultuserpassword"
      POSTGRES_DB: "db"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
volumes:
  postgres_data:
networks:
  prod_net: