services:
  # Билд фронтенда
  frontend:
    image: node:20-alpine
    profiles: ["build-only"]
    working_dir: /app
    volumes:
      - ./frontend:/src:ro
      - ./frontend-build:/app/dist
    command: >
      sh -c "
        cp -r /src/* . &&
        npm ci &&
        npm run build
      "
    restart: "no"
  # Билд и запуск телеграм-бота
  bot:
    restart: always
    build:
      context: chatbot/
      dockerfile: Dockerfile
    image: tpu-practice-searcher-bot:latest
    container_name: tpu-practice-searcher-bot-container
    networks:
      - prod_net
    env_file: .env
    environment:
      DB_HOST: "db"   # Сервис с базой данных
    depends_on:
      - db
  # Билд и запуск бэкенда
  backend:
    restart: always
    build:
      context: backend/
      dockerfile: Dockerfile
    image: tpu-practice-searcher:latest
    container_name: tpu-practice-searcher-container
    networks:
      - prod_net
    env_file: .env
    environment:
      DB_HOST: "db"   # Сервис с базой данных
    ports:
      - "8000:8000"   # Порт хоста : порт контейнера
    depends_on:
      - db
    command: "./tpu-practice-searcher"
  # Билд и запуск базы данных
  db:
    image: postgres:16.0
    container_name: postgres-container
    networks:
      - prod_net
    env_file: .env
    ports:
      - "5432:5432"   # Порт хоста : порт контейнера
    volumes:
      - postgres_data:/var/lib/postgresql/data   # Персистентность данных
    restart: always
volumes:
  postgres_data:
networks:
  prod_net: